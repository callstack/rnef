import spawn from 'nano-spawn';
import { logger } from '@rnef/tools';

export async function initGitRepo(path: string, version?: string) {
  if (!(await hasGitClient())) {
    logger.info('Git client not found, skipping git initialization');
    return;
  }

  if (await isGitRepo(path)) {
    logger.debug('Git repo already initialized, skipping git initialization');
    return;
  }

  try {
    const initialCommitMessage = `Initial commit${
      version ? '\n\nGenerated by rnef@' + version : ''
    }`;

    await spawn('git', ['init'], { cwd: path });
    await spawn('git', ['branch', '-M', 'main'], { cwd: path });
    await spawn('git', ['add', '.'], { cwd: path });
    await spawn('git', ['commit', '-m', initialCommitMessage], {
      cwd: path,
    });
  } catch (error) {
    logger.warn('Failed to initialize git repository', error);
  }
}

export async function hasGitClient(): Promise<boolean> {
  try {
    await spawn('git', ['--version'], { stdio: 'ignore' });
    return true;
  } catch {
    return false;
  }
}

export async function isGitRepo(path: string): Promise<boolean> {
  try {
    await spawn('git', ['rev-parse', '--is-inside-work-tree'], {
      stdio: 'ignore',
      cwd: path,
    });
    return true;
  } catch {
    return false;
  }
}
