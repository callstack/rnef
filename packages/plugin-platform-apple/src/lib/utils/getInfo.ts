import spawn from 'nano-spawn';
import { XMLParser } from 'fast-xml-parser';
import * as fs from 'fs';
import * as path from 'path';
import { Info, XcodeProjectInfo } from '../types/index.js';
import { logger } from '@rnef/tools';
import { spinner } from '@clack/prompts';

function isErrorLike(err: unknown): err is { message: string } {
  return Boolean(
    err &&
      typeof err === 'object' &&
      'message' in err &&
      typeof err.message === 'string'
  );
}

function parseTargetList(json: string): Info | undefined {
  try {
    const info = JSON.parse(json);

    if ('project' in info) {
      return info.project;
    } else if ('workspace' in info) {
      return info.workspace;
    }

    return undefined;
  } catch (error) {
    if (isErrorLike(error)) {
      const match = error.message.match(/xcodebuild: error: (.*)/);
      if (match) {
        throw new Error(match[0]);
      }
    }

    throw error;
  }
}

export async function getInfo(
  projectInfo: XcodeProjectInfo,
  sourceDir: string
): Promise<Info | undefined> {
  const loader = spinner();
  loader.start('Gathering Xcode project information');
  if (!projectInfo.isWorkspace) {
    const { stdout } = await spawn('xcodebuild', ['-list', '-json']);
    return parseTargetList(stdout);
  }

  const xmlParser = new XMLParser({ ignoreAttributes: false });
  const xcworkspacedata = path.join(
    sourceDir,
    projectInfo.name,
    'contents.xcworkspacedata'
  );
  const workspace = fs.readFileSync(xcworkspacedata, { encoding: 'utf-8' });
  const fileRef = xmlParser.parse(workspace).Workspace.FileRef;
  const refs = Array.isArray(fileRef) ? fileRef : [fileRef];

  return refs.reduce(async (result, ref) => {
    const location = ref['@_location'];

    // Ignore the project generated by CocoaPods
    if (location.endsWith('/Pods.xcodeproj')) {
      return result;
    }

    let stdout = '';
    try {
      const buildOutput = await spawn(
        'xcodebuild',
        [
          '-list',
          '-json',
          '-project',
          path.join(sourceDir, location.replace('group:', '')),
        ],
        {
          cwd: sourceDir,
          stdio: logger.isVerbose() ? 'pipe' : ['ignore', 'pipe', 'inherit'],
        }
      );
      stdout = buildOutput.stdout;
      logger.debug(stdout);
      logger.debug(buildOutput.stderr);
      loader.stop('Gathered Xcode project information.');
    } catch (error) {
      loader.stop(
        'Failed to get project info. Check the error message above for details.',
        1
      );
      throw error;
    }
    const info = parseTargetList(stdout);
    if (!info) {
      return result;
    }

    const schemes = info.schemes;

    // If this is the first project, use it as the "main" project
    if (!result) {
      if (!Array.isArray(schemes)) {
        info.schemes = [];
      }
      return info;
    }

    if (!Array.isArray(result.schemes)) {
      throw new Error("This shouldn't happen since we set it earlier");
    }

    // For subsequent projects, merge schemes list
    if (Array.isArray(schemes) && schemes.length > 0) {
      result.schemes = result.schemes.concat(schemes);
    }

    return result;
  }, undefined);
}
